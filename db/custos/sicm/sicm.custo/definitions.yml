
Definition_1:
  id: '1'
  name: "*embedded*"
  description: the right to start processes embedded in launch items
  uri:
  launch_fields:
  domain: admin

Definition_2:
  id: '2'
  name: "*untracked*"
  description: the right to launch processes from any URI
  uri:
  launch_fields:
  domain: admin

Definition_3:
  id: '3'
  name: simple_sequence
  description: a simple sequence
  uri: |-
    Ruote.process_definition "a tiny sequence" do
      description "a tiny sequence"
      sequence do
        participant 'admin'
        participant 'bob'
      end
    end
  launch_fields:
  domain: admin

Definition_4:
  id: '4'
  name: leave_request
  description: may I leave the office ?
  uri: |-
    #
    # an example of a Ruby process definition, for a small
    # leave request application.
    #
    Ruote.process_definition "requesting some time off" do
      description "requesting some time off"
      #
      # setting some fields and variables right at the beginning of the
      # process
      #
      # setting some "aliases" : the process definition won't mention
      # users by their login names directly, but by their function
      set :v => "employee", :value => "${launcher}"
      set :v => "assistant", :value => "bob"
      set :v => "boss", :value => "alice"
      #
      # the 'body' of the process definition
      #
      sequence do
        #
        # the first participant is the employee (the user who
        # launched the process)
        #
        set :f => "comment", :value => "cccc"
        employee
        #
        # now setting some fields that the assistant and perhaps
        # the boss will fill.
        #
        set :f => "granted", :value => "false"
        set :f => "not_enough_info", :value => "true"
        set :f => "boss_should_have_a_look", :value => "true"
        assistant
        #
        # if the assistant set the field 'boss_should_have_a_look',
        # then the process will head to the boss desk
        #
        boss :if => "${f:boss_should_have_a_look}"
        #
        # employee gets the answer to his request
        #
        employee
      end
    end
  launch_fields: '{"employee":"","from_date":"","to_date":"","reason":""}'
  domain: admin

Definition_5:
  id: '5'
  name: promotion
  description: promote any objects
  uri: |-
    Ruote.process_definition 'promote' do
      description "Promotion document PLM"
      set :v => "demandeur", :value => "creator"
      set :v => "reviewer1", :value => "creator"
      set :v => "reviewer2", :value => "designer"
      set :v => "valideur", :value => "valider"
      cursor do
        set :f => "comment_createur", :value => "comment demandeur"
        demandeur :activity =>  "Copier objet(s), Commenter"
        #ko back :unless => "${f:comment_createur} != ''"
        participant "plm", :task => "promote", :step => "init", :relation => "applicable"
        # taches paralleles, quorum=1
        set :f => "comment_relecteur", :value => "comment relecteur"
        concurrence :count => 1 do
          reviewer1 :activity => "-Copier objet(s) \n-Relire le document applicable\n-Commenter"
          reviewer2 :activity => "-Copier objet(s) \n-Relire le document applicable\n-Commenter"
        end
        #ko back :unless => "${f:comment_relecteur} != ''"
        participant "plm", :task => "promote", :step => "review", :relation => "reference"
        set :f => "ok", :value => "true"
        set :f => "comment_valideur", :value => "comment valideur"
        valideur :activity =>"commenter puis valider (ok=true) ou (ok=false) non ce document"
        #ko back :if => "${f:ok} == 'false'" && "${f:comment_valideur} == ''"
        # back to the reviewers if editor not happy
        rewind :if => '${f:ok} == false'
        participant "plm", :task => "promote", :step => "exec", :relation => "applicable"
      end
    end
  domain: sicm.custo

Definition_8:
  id: '8'
  name: validate-user
  description: Validate a new user
  uri: |-
    Ruote.process_definition 'Validate a new user' do
      description "Validation of a PLM user"
      set :v => "admin", :value => "admin"
      set :v => "valider", :value => "admin"
      cursor do
        set :f => "comment", :value => "comment"
        admin :activity =>  "Edit user to add projects, roles and groups"
        #ko back :if => "${f:comment} == ''"
        participant "plm" , :task => "validate_user", :step => "init", :relation => "applicable"
        set :f => "ok", :value => "true"
        set :f => "comment_valider", :value => "comment valider"
        valider :activity =>"Comment and validate (ok=true) ou (ok=false) non ce user"
        participant "plm"  , :task => "validate_user", :step => "exec", :relation => "applicable"
        #ko back :if =>  "${f:ok} == 'false'" && "${f:comment_valideur} == ''"
        rewind :if =>  '${f:ok} == false'
      end
    end
  launch_fields:
  domain: sicm.custo

Definition_10:
  id: '10'
  name: revision
  description: revise any objects
  uri: |-
    Ruote.process_definition "revise any objects" do
      description "Revision objet PLM"
      set :v => "demandeur", :value => "creator"
      set :v => "valideur", :value => "SICM"
      cursor do
        set :f => "comment_createur", :value => "commentaire demandeur"
        demandeur :activity =>  "Copier objet(s), Commenter"
        #ko back :if => "${f:comment_createur} == ''"
        participant "plm", :task=>"revise",:step=>"init", :relation => "revise_from"
        set :f => "ok", :value => "true"
        set :f => "comment_valideur", :value => "commentaire valideur"
        valideur :activity => "Commentez puis validez (true) ou non (false)"
       #ko  back :if =>  "${f:ok} == 'false'" && "${f:comment_valideur} == ''"
        rewind :if =>  '${f:ok} == false'
        participant "plm", :task=>"revise", :step=>"exec", :relation => "revise_to"
      end
    end
  launch_fields:
  domain: sicm.custo

